/*! \page order_submission Placing Orders

	\section next_valid_id The Next Valid Identifier

	Perhaps the most important event received after successfully connecting to the TWS is the @ref IBApi::EWrapper::nextValidId, which is also triggered after invoking the @ref IBApi::EClient::reqIds method.
	As its name indicates, the nextValidId event provides the next valid identifier needed to place an order. This identifier is nothing more than the next number in the sequence.
	This means that if there is a single client application submitting orders to an account, it does not have to obtain a new valid identifier every time it needs to submit a new order.
	It is enough to increase the last value received from the nextValidId method by one. For example, if the valid identifier for your first API order is 1, the next valid identifier would be 2 and so on.


	However if there are multiple client applications connected to one account, it is necessary to use an order ID with new orders which is greater than all previous order IDs returned to the client
	application in openOrder or orderStatus callbacks. For instance, if the client is set as the Master client, it will automatically receive order status and trade callbacks from orders placed
	from other clients. In such a case, any orderID used in placeOrder must be greater than the orderIDs returned in these status callbacks. Alternatively if the function reqAllOpenOrders is
	used by a client, subsequent orders placed by that client must have order IDs greater than the order IDs of all orders returned because of that function call.
	You can always use the @ref IBApi::EClient::reqIds method in the event that your client application loses track of the sequence.

	<ul id="tab">
		<li class="active">
			\snippet Program.cs reqids
		</li>
		<li>
			\snippet Testbed.java reqids
		</li>
		<li>
			\snippet MainModule.vb reqids
		</li>
		<li>
			\snippet TestCppClient.cpp reqids
		</li>
		<li>
			\snippet Program.py reqids
		</li>
	</ul>

	The above will result in @ref IBApi::EWrapper::nextValidId callback being invoked:

	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs ewrapperimpl
		   ...
			\snippet EWrapperImpl.cs nextvalidid
		</li>
		<li>
			\snippet EWrapperImpl.java ewrapperimpl
			...
			\snippet EWrapperImpl.java nextvalidid
		</li>
		<li>
			\snippet EWrapperImpl.vb ewrapperimpl
		   ...
			\snippet EWrapperImpl.vb nextvalidid
		</li>
		<li>
			\snippet TestCppClient.h ewrapperimpl
		   ...
			\snippet TestCppClient.cpp nextvalidid
		</li>
		<li>
			\snippet Program.py ewrapperimpl
		   ...
			\snippet Program.py nextvalidid
		</li>
	</ul>

	<b>The next valid identifier is persistent between TWS sessions.</b>

	If necessary, you can reset the order ID sequence within the API Settings dialogue. Note however that the order sequence Id can only be reset if there are no active API orders.

	\image html order_id_reset.png

	\section submission Placing Orders

	Orders are submitted via the @ref IBApi::EClient::placeOrder method. From the snippet below, note how a variable holding the nextValidId is incremented automatically:

	<ul id="tab">
		<li class="active">
			\snippet Program.cs order_submission
		</li>
		<li>
			\snippet Testbed.java order_submission
		</li>
		<li>
			\snippet MainModule.vb order_submission
		</li>
		<li>
			\snippet TestCppClient.cpp order_submission
		</li>
		<li>
			\snippet Program.py order_submission
		</li>
	</ul>

	Immediately after the order was submitted correctly, the TWS will start sending events concerning the order's activity via @ref IBApi::EWrapper::openOrder and @ref IBApi::EWrapper::orderStatus

	- Advisors executing allocation orders will receive execution details and commissions for the allocation order itself. To receive allocation details and commissions for a specific subaccount @ref IBApi::EClient::reqExecutions can be used.

	- An order can be sent to TWS but not transmitted to the IB server by setting the IBApi.Order.Transmit flag in the order class to <b>False</b>. Untransmitted orders will only be available within that TWS session (not for other usernames) and will be cleared on restart. Also, they can be cancelled or transmitted from the API but not viewed while they remain in the "untransmitted" state.

	\section advanced_order_rejection Advanced order rejection

	With <b>TWS 10.14</b> and <b>TWS API 10.14</b> there have been added @ref IBApi::Order <b><i>advancedErrorOverride</i></b> and @ref IBApi::EWrapper::error <b><i>advancedOrderRejectJson</i></b> properties. They have been introduced to extend @ref cryptocurrency offerings across other regions.

	- <b><i>advancedErrorOverride</i></b> accepts a comma-separated list with parameters containing error tags. This list will override the mentioned errors and proceed with the order placement.
	- <b><i>advancedOrderRejectJson</i></b> returns order reject description in JSON format. The JSON responses can be used to add fields to <b><i>advancedErrorOverride</i></b>.<br>
		The response your API client will receive from our back end via reject message will contain a FIX Tag <b>8230</b>. This FIX Tag is for order rejection message.<br>
		For example, the response will contain code <b>8229=IBDBUYTX</b> which can be passed in <b>8229</b> (advancedErrorOverride) field in IBApi::EClient::placeOrder method.<br>
		The tag values of <b>8229</b> can contain a comma-separated list of advanced error override codes. For example, <b>8229=IBDBUYTX,MOBILEPH</b>, will override both of the rejections.
	- Additionally, a new API Setting has been introduced: <b>Show advanced order reject in UI always</b><br>
		If <i>checked</i>, the order reject will not be sent to API.

	\section open_order The openOrder callback

	The @ref IBApi::EWrapper::openOrder method delivers an @ref IBApi::Order object representing an open order within the system. In addition, @ref IBApi::EWrapper::openOrder returns an an @ref IBApi::OrderState object that is used to return estimated pre-trade margin and commission information in response to invoking IBApi.EClient.placeOrder with a @ref IBApi::Order object that has the flag @ref IBApi.Order.WhatIf flag set to True. See also: <a href="http://interactivebrokers.github.io/tws-api/margin.html" target="_blank">Checking Margin Changes</a>.

	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs ewrapperimpl
		   ...
			\snippet EWrapperImpl.cs openorder
		</li>
		<li>
			\snippet EWrapperImpl.java ewrapperimpl
			...
			\snippet EWrapperImpl.java openorder
		</li>
		<li>
			\snippet EWrapperImpl.vb ewrapperimpl
		   ...
			\snippet EWrapperImpl.vb openorder
		</li>
		<li>
			\snippet TestCppClient.h ewrapperimpl
			...
			\snippet TestCppClient.cpp openorder
		</li>
		<li>
			\snippet Program.py ewrapperimpl
			...
			\snippet Program.py openorder
		</li>
	</ul>

	\section order_status The orderStatus callback

	The @ref IBApi::EWrapper::orderStatus method contains all relevant information on the current status of the order execution-wise (i.e. amount filled and pending, filling price, etc.).

	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs ewrapperimpl
		   ...
			\snippet EWrapperImpl.cs orderstatus
		</li>
		<li>
			\snippet EWrapperImpl.java ewrapperimpl
			...
			\snippet EWrapperImpl.java orderstatus
		</li>
		<li>
			\snippet EWrapperImpl.vb ewrapperimpl
		   ...
			\snippet EWrapperImpl.vb orderstatus
		</li>
		<li>
			\snippet TestCppClient.h ewrapperimpl
			...
			\snippet TestCppClient.cpp orderstatus
		</li>
		<li>
			\snippet Program.py ewrapperimpl
			...
			\snippet Program.py orderstatus
		</li>
	</ul>

	<b>Automatic Order Status Messages</b> (without invoking reqOpenOrders or reqAllOpenOrders)

	- Clients with the ID of the client submitting the order will receive order status messages indicating changes in the order status.

	- The client with @ref master_client (set in TWS/IBG) will receive order status messages for all clients.

	- Client ID 0 will receive order status messages for its own (client ID 0) orders and also for orders submitted manually from TWS.

	<b>Possible Order States</b>

	- <b>ApiPending</b> - indicates order has not yet been sent to IB server, for instance if there is a delay in receiving the security definition. Uncommonly received.
	- <b>PendingSubmit</b> - indicates the order was sent from TWS, but confirmation has not been received that it has been received by the destination. Most commonly because exchange is closed.
	- <b>PendingCancel</b> - indicates that a request has been sent to cancel an order but confirmation has not been received of its cancellation.
	- <b>PreSubmitted</b> - indicates that a simulated order type has been accepted by the IB system and that this order has yet to be elected. The order is held in the IB system until the election criteria are met. At that time the order is transmitted to the order destination as specified.
	- <b>Submitted</b> - indicates that your order has been accepted at the order destination and is working.
	- <b>ApiCancelled</b> - after an order has been submitted and before it has been acknowledged, an API client can request its cancellation, producing this state.
	- <b>Cancelled</b> - indicates that the balance of your order has been confirmed cancelled by the IB system. This could occur unexpectedly when IB or the destination has rejected your order. For example, if your order is subject to price checks, it could be cancelled, as explained in @ref order_placement
	- <b>Filled</b> - indicates that the order has been completely filled.
	- <b>Inactive</b> - indicates an order is not working, possible reasons include:
		- it is invalid or triggered an error. A corresponding error code is expected to the error() function.
            - This error may be a reject, for example a regulatory size reject. See @ref order_placement
		- the order is to short shares but the order is being held while shares are being located.
		- an order is placed manually in TWS while the exchange is closed.
	    - an order is blocked by TWS due to a precautionary setting and appears there in an untransmitted state

	<b>Important notes</b> concerning @ref IBApi::EWrapper::orderStatus :

	- Typically there are duplicate orderStatus messages with the same information that will be received by a client. This corresponds to messages sent back from TWS, the IB server, or the exchange.

	- There are not guaranteed to be orderStatus callbacks for every change in order status. For example with market orders when the order is accepted and executes immediately, there commonly will not be any corresponding orderStatus callbacks. For that reason it is recommended to monitor the @ref IBApi::EWrapper::execDetails function in addition to @ref IBApi::EWrapper::orderStatus.

	- Beginning in API v973.04, a parameter mktCapPrice is included in the orderStatus callback. If an order has been <a target="_blank" class="linkexternal" href="https://www.interactivebrokers.com/en/index.php?f=14186" >price-capped</a>, mktCapPrice will indicate the price at which it has been capped.

	\section order_attach Attaching Orders

	Advanced orders such as @ref bracket_order or @ref hedging involve attaching child orders to a parent. This can be easily done via the @ref IBApi::Order::ParentId attribute by assigning a child
	order's @ref IBApi::Order::ParentId to an existing order's @ref IBApi::Order::OrderId. When an order is attached to another, the system will keep the child order 'on hold' until its parent fills.
	Once the parent order is completely filled, its children will automatically become active.

	<b>Important:</b> When attaching orders and to prevent accidental executions it is a very good idea to make use of the @ref IBApi::Order::Transmit flag as demonstrated in @ref bracket_order

	<br><br>

*/

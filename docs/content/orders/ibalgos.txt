/*! \page ibalgos IB Algorithms
	
	\section adaptive Adaptive Algo
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=19091" target="_blank" class="linkexternal">Adaptive Algo</a> combines IB's Smartrouting capabilities with user-defined priority settings in an effort to achieve further cost efficiency at the point of execution. 
	Using the Adaptive algo leads to better execution prices on average than for regular limit or market orders.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr>
			<td>adaptivePriority</td>
			<td>The 'Priority' selector determines the time taken to scan for better execution prices. The 'Urgent' setting scans only briefly, while the 'Patient' scan works more slowly and has a higher chance of achieving a better overall fill for your order.</td>
			<td>Urgent > Normal > Patient</td>
		</tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs adaptive
			...
			\snippet AvailableAlgoParams.cs adaptive_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java adaptive
			...
			\snippet AvailableAlgoParams.java adaptive_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb adaptive
			...
			\snippet AvailableAlgoParams.vb adaptive_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp adaptive
			...
			\snippet AvailableAlgoParams.cpp adaptive_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py adaptive
			...
			\snippet AvailableAlgoParams.py adaptive_params
		</li>
	</ul>

    <br>
    
    <b>Note:</b> The Time Zone in "startTime" and "endTime" attributes is only applied when the format "hh:mm:ss TMZ" is used
	
	\section arrivalprice ArrivalPrice
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=1122" target="_blank" class="linkexternal">Arrival Price</a> algorithmic order type will attempt to achieve, over 
	the course of the order, the bid/ask midpoint at the time the order is submitted. The Arrival Price algo is designed to keep hidden orders that will impact a high percentage of the 
	average daily volume (ADV). The pace of execution is determined by the user-assigned level of risk aversion and the user-defined target percent of average daily volume. How quickly the order 
	is submitted during the day is determined by the level of urgency: the higher the urgency the faster it will execute but will expose it to a greater market impact. Market impact can be lessened 
	by assigning lesser urgency, which is likely to lengthen the duration of the order. The user can set the max percent of ADV from 1 to 50%. The order entry screen allows the user 
	to determine when the order will start and end regardless of whether or not the full amount of the order has been filled. By checking the box marked Allow trading past end 
	time the algo will continue to work past the specified end time in an effort to fill the remaining portion of the order.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>maxPctVol</td><td>Maximum percentage of ADV</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>riskAversion</td><td>Urgency/risk aversion</td><td>Get Done, Aggressive, Neutral, Passive</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>allowPastEndTime</td><td>Allow trading past end time</td><td>1 (true) or 0 (false)</td></tr>
		<tr><td>forceCompletion</td><td>Attempt completion by the end of the day</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs arrivalpx
			...
			\snippet AvailableAlgoParams.cs arrivalpx_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java arrivalpx
			...
			\snippet AvailableAlgoParams.java arrivalpx_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb arrivalpx
			...
			\snippet AvailableAlgoParams.vb arrivalpx_params
		
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp arrivalpx
			...
			\snippet AvailableAlgoParams.cpp arrivalpx_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py arrivalpx
			...
			\snippet AvailableAlgoParams.py arrivalpx_params
		</li>
	</ul>
	
	\section closepx Close Price
	
	Investors submitting market or limit orders into the closing auction may adversely affect the closing price, especially when the size of the order is large relative to the average close auction volume. 
	In order to help investors attempting to execute towards the end of the trading session we have developed the <a href="https://www.interactivebrokers.com/en/index.php?f=19749" target="_blank" class="linkexternal">Close Price</a> algo Strategy. 
	This algo breaks down large order amounts and determines the timing of order entry so that it will continuously execute in order to minimize slippage. The start and pace of execution are determined by the user who assigns a level of market risk and specifies the target percentage of volume, while the algo considers the prior volatility of the stock.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>maxPctVol</td><td>Maximum percentage of ADV</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>riskAversion</td><td>Urgency/risk aversion</td><td>Get Done, Aggressive, Neutral, Passive</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>forceCompletion</td><td>Attempt completion by the end of the day</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs closepx
			...
			\snippet AvailableAlgoParams.cs closepx_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java closepx
			...
			\snippet AvailableAlgoParams.java closepx_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb closepx
			...
			\snippet AvailableAlgoParams.vb closepx_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp closepx
			...
			\snippet AvailableAlgoParams.cpp closepx_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py closepx
			...
			\snippet AvailableAlgoParams.py closepx_params
		</li>
	</ul>
	
	\section midprice Midprice
	A <a target="_blank" class="linkexternal" href="https://www.interactivebrokers.com/en/index.php?f=36735">Midprice</a> order is designed to split the difference between the bid and ask prices, and fill at the current midpoint of the NBBO or better. Set an optional price cap to define the highest price (for a buy order) or the lowest price (for a sell order) you are willing to accept. 
	Requires TWS 975+. Smart-routing to US stocks only.
	<ul>
		<li>Products: US STK</li>
		<li>Exchanges: Smart-routing only</li>
	</ul> 	
	<ul id="tab">
		<li class="active">
			\snippet OrderSamples.cs midprice
			\snippet Program.cs place_midprice
		</li>
		<li> 
			\snippet OrderSamples.java midprice
			\snippet Testbed.java place_midprice
		</li>
		<li> 
			\snippet OrderSamples.vb midprice
			\snippet MainModule.vb	place_midprice
		</li>
		<li> 
			\snippet OrderSamples.cpp midprice
			\snippet TestCppClient.cpp place_midprice	
		</li>
		<li> 
			\snippet OrderSamples.py midprice
			\snippet Program.py place_midprice
		</li>
	</ul>
	
	\section darkice DarkIce
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=3123" target="_blank" class="linkexternal">Dark Ice</a> order type develops the concept of privacy adopted by orders such 
	as Iceberg or Reserve, using a proprietary algorithm to further hide the volume displayed to the market by the order. Clients can determine the timeframe an order remains live and have 
	the option to allow trading past end time in the event it is unfilled by the stated end time. In order to minimize market impact in the event of large orders, users can specify a display 
	size to be shown to the market different from the actual order size. Additionally, the Dark Ice algo randomizes the display size +/- 50% based upon the probability of the price moving favourably. 
	Further, using calculated probabilities, the algo decides whether to place the order at the limit price or one tick lower than the current offer for buy orders and one tick higher than the 
	current bid for sell orders.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>displaySize</td><td>Order size to be displayed</td><td></td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>allowPastEndTime</td><td>Allow trading past end time</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs darkice
			...
			\snippet AvailableAlgoParams.cs darkice_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java darkice
			...
			\snippet AvailableAlgoParams.java darkice_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb darkice
			...
			\snippet AvailableAlgoParams.vb darkice_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp darkice
			...
			\snippet AvailableAlgoParams.cpp darkice_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py darkice
			...
			\snippet AvailableAlgoParams.py darkice_params
		</li>
	</ul>
	
	\section ad Accumulate/Distribute	
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=1223" target="_blank" class="linkexternal">Accumulate/Distribute</a> algo can help you to achieve the best price for a 
	large volume order without being noticed in the market, and can be set up for high frequency trading. By slicing your order into smaller randomly-sized order increments that are released 
	at random time intervals within a user-defined time period, the algo allows the trading of large blocks of stock and other instruments without being detected in the market. The algo allows 
	limit, market, and relative order types. It is important to keep in mind the API A/D algo will not have all available parameters of the A/D algos that can be created in TWS. 
	Note: The new fields activeTimeStart and activeTimeEnd are used in TWS 971+; startTime and endTime were used previously.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>componentSize</td><td>Quantity of increment</td><td>Cannot exceed initial size</td></tr>
		<tr><td>timeBetweenOrders</td><td>Time interval in seconds between each order</td><td></td></tr>
		<tr><td>randomizeTime20</td><td>Randomise time period by +/- 20%</td><td>1 (true) or 0 (false)</td></tr>
		<tr><td>randomizeSize55</td><td>Randomise size by +/- 55%</td><td>1 (true) or 0 (false)</td></tr>
		<tr><td>giveUp</td><td>Number associated with the clearing</td><td></td></tr>
		<tr><td>catchUp</td><td>Catch up in time</td><td>1 (true) or 0 (false)</td></tr>
		<tr><td>waitForFill</td><td>Wait for current order to fill before submitting next order</td><td>1 (true) or 0 (false)</td></tr>
		<tr><td>activeTimeStart</td><td>Algorithm starting time</td><td>YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>activeTimeEnd</td><td>Algorithm ending time</td><td>YYYYMMDD-hh:mm:ss TMZ</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs ad
			...
			\snippet AvailableAlgoParams.cs ad_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java ad
			...
			\snippet AvailableAlgoParams.java ad_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb ad
			...
			\snippet AvailableAlgoParams.vb ad_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp ad
			...
			\snippet AvailableAlgoParams.cpp ad_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py ad
			...
			\snippet AvailableAlgoParams.py ad_params
		</li>
	</ul>
	
	\section pctvol Percentage of Volume
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=1123" target="_blank" class="linkexternal">Percent of Volume </a> algo can limit the contribution of orders to overall average daily volume in order to minimize impact. 
	Clients can set a value between 1-50% to control their participation between stated start and end times. Order quantity and volume distribution over the day is determined using the target percent of volume you entered along with continuously updated volume forecasts calculated from TWS market data. 
	In addition, the algo can be set to avoid taking liquidity, which may help avoid liquidity-taker fees and could result in liquidity-adding rebates. By checking the Attempt to never take liquidity box, the algo is discouraged from hitting the bid or lifting the offer if possible. 
	However, this may also result in greater deviations from the benchmark, and in partial fills, since the posted bid/offer may not always get hit as the price moves up/down. IB will use best efforts not to take liquidity when this box is checked, however, there will be times that it cannot be avoided.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>pctVol</td><td>Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>noTakeLiq</td><td>Attempt to never take liquidity</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs pctvol
			...
			\snippet AvailableAlgoParams.cs pctvol_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java pctvol
			...
			\snippet AvailableAlgoParams.java pctvol_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb pctvol
			...
			\snippet AvailableAlgoParams.vb pctvol_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp pctvol
			...
			\snippet AvailableAlgoParams.cpp pctvol_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py pctvol
			...
			\snippet AvailableAlgoParams.py pctvol_params
		</li>
	</ul>
	
	\section twap TWAP
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=1125" target="_blank" class="linkexternal">TWAP</a> algo aims to achieve the time-weighted average price calculated from 
	the time you submit the order to the time it completes. Incomplete orders at the end of the stated completion time will continue to fill if the box 'allow trading past end time' is checked. 
	Users can set the order to trade only when specified conditions are met. Those user-defined inputs include when the order is marketable, when the midpoint matches the required price, when 
	the same side (buy or sell) matches to make the order marketable or when the last traded price would make the order marketable. For the TWAP algo, the average price calculation is calculated 
	from the order entry time through the close of the market and will only attempt to execute when the criterion is met. The order may not fill throughout its stated duration and so the order is 
	not guaranteed. TWAP is available for all US equities. 
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>strategyType</td><td>Trade strategy</td><td>Marketable, Matching, Midpoint, Matching Same Side, Matching Last</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>allowPastEndTime</td><td>Allow trading past end time</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs twap
			...
			\snippet AvailableAlgoParams.cs twap_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java twap
			...
			\snippet AvailableAlgoParams.java twap_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb twap
			...
			\snippet AvailableAlgoParams.vb twap_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp twap
			...
			\snippet AvailableAlgoParams.cpp twap_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py twap
			...
			\snippet AvailableAlgoParams.py twap_params
		</li>
	</ul>
	
	\section pctvolpx Price Variant Percentage of Volume Strategy
	
	<a href="https://www.interactivebrokers.com/en/index.php?f=14369#collapse03" target="_blank" class="linkexternal">Price Variant Percentage of Volume Strategy</a> - This algo allows you to participate in volume at a user-defined rate that varies over time depending on the market price of the security. 
	This algo allows you to buy more aggressively when the price is low and be more passive as the price increases, and just the opposite for sell orders. The order quantity and volume distribution over the time during which the order is active is determined using the target percent of volume you entered along with continuously updated volume forecasts calculated from TWS market data.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>pctVol</td><td>Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>deltaPctVol</td><td>Target Percentage Change Rate</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>minPctVol4Px</td><td>Minimum Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>maxPctVol4Px</td><td>Maximum Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>noTakeLiq</td><td>Attempt to never take liquidity</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs pctvolpx
			...
			\snippet AvailableAlgoParams.cs pctvolpx_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java pctvolpx
			...
			\snippet AvailableAlgoParams.java pctvolpx_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb pctvolpx
			...
			\snippet AvailableAlgoParams.vb pctvolpx_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp pctvolpx
			...
			\snippet AvailableAlgoParams.cpp pctvolpx_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py pctvolpx
			...
			\snippet AvailableAlgoParams.py pctvolpx_params
		</li>
	</ul>
	
	\section pctvolsz Size Variant Percentage of Volume Strategy
	
	<a href="https://www.interactivebrokers.com/en/index.php?f=14369#collapse02" target="_blank" class="linkexternal">Size Variant Percentage of Volume Strategy</a> - This algo allows you to participate in volume at a user-defined rate that varies over time depending on the remaining size of the order. 
	Define the target percent rate at the start time (Initial Participation Rate) and at the end time (Terminal Participation Rate), and the algo calculates the participation rate over time between the two based on the remaining order size. This allows the order to be more aggressive initially and less aggressive toward the end, or vice versa. 
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>startPctVol</td><td>Initial Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>endPctVol</td><td>Terminal Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>noTakeLiq</td><td>Attempt to never take liquidity</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs pctvolsz
			...
			\snippet AvailableAlgoParams.cs pctvolsz_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java pctvolsz
			...
			\snippet AvailableAlgoParams.java pctvolsz_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb pctvolsz
			...
			\snippet AvailableAlgoParams.vb pctvolsz_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp pctvolsz
			...
			\snippet AvailableAlgoParams.cpp pctvolsz_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py pctvolsz
			...
			\snippet AvailableAlgoParams.py pctvolsz_params
		</li>
	</ul>
	
	\section pctvoltm Time Variant Percentage of Volume Strategy
	
	<a href="https://www.interactivebrokers.com/en/index.php?f=14369#collapse01" target="_blank" class="linkexternal">Time Variant Percentage of Volume Strategy</a> - This algo allows you to participate in volume at a user-defined rate that varies with time. 
	Define the target percent rate at the start time and at the end time, and the algo calculates the participation rate over time between the two. This allows the order to be more aggressive initially and less aggressive toward the end, or vice versa.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>startPctVol</td><td>Initial Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>endPctVol</td><td>Terminal Target Percentage</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>noTakeLiq</td><td>Attempt to never take liquidity</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs pctvoltm
			...
			\snippet AvailableAlgoParams.cs pctvoltm_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java pctvoltm
			...
			\snippet AvailableAlgoParams.java pctvoltm_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb pctvoltm
			...
			\snippet AvailableAlgoParams.vb pctvoltm_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp pctvoltm
			...
			\snippet AvailableAlgoParams.cpp pctvoltm_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py pctvoltm
			...
			\snippet AvailableAlgoParams.py pctvoltm_params
		</li>
	</ul>
		
	\section vwap VWAP
	
	IB's best-efforts <a href="https://www.interactivebrokers.com/en/index.php?f=1124" target="_blank" class="linkexternal">VWAP</a> algo seeks to achieve the Volume-Weighted Average price (VWAP), 
	calculated from the time you submit the order to the close of the market.

	Best-efforts VWAP algo is a lower-cost alternative to the Guaranteed VWAP (no longer supported) that enables the user to attempt never to take liquidity while also trading past the end time. Because the order 
	may not be filled on the bid or at the ask prices, there is a trade-off with this algo. The order may not fully fill if the user is attempting to avoid liquidity-taking fees and/or maximize 
	liquidity-adding rebates, and may miss the benchmark by asking to stay on the bid or ask. The user can determine the maximum percentage of average daily volume (up to 50%) his order will comprise. 
	The system will generate the VWAP from the time the order is entered through the close of trading, and the order can be limited to trading over a pre-determined period. The user can request 
	the order to continue beyond its stated end time if unfilled at the end of the stated period. The best-efforts VWAP algo is available for all US equities.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>maxPctVol</td><td>Maximum percentage of average daily volume</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>startTime</td><td>Algorithm starting time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>endTime</td><td>Algorithm ending time</td><td>hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ</td></tr>
		<tr><td>allowPastEndTime</td><td>Allow trading past end time</td><td>1 (true) or 0 (false)</td></tr>
		<tr><td>noTakeLiq</td><td>Attempt to never take liquidity</td><td>1 (true) or 0 (false)</td></tr>
		<tr><td>speedUp</td><td>Compensate for the decreased fill rate due to presence of limit price</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs vwap
			...
			\snippet AvailableAlgoParams.cs vwap_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java vwap
			...
			\snippet AvailableAlgoParams.java vwap_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb vwap
			...
			\snippet AvailableAlgoParams.vb vwap_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp vwap
			...
			\snippet AvailableAlgoParams.cpp vwap_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py vwap
			...
			\snippet AvailableAlgoParams.py vwap_params
		</li>
	</ul>
	
	\section balanceimpact Balance Impact Risk
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=1120" target="_blank" class="linkexternal">Balance Impact Risk</a> balances the market impact of trading the option with the 
	risk of price change over the time horizon of the order. This strategy considers the user-assigned level of risk aversion to define the pace of the execution, along with the user-defined 
	target percent of volume.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>maxPctVol</td><td>Maximum percentage of average daily volume</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
		<tr><td>riskAversion</td><td>Urgency/risk aversion</td><td>Get Done, Aggressive, Neutral, Passive</td></tr>
		<tr><td>forceCompletion</td><td>Attempt completion by the end of the day</td><td>1 (true) or 0 (false)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs balanceimpactrisk
			...
			\snippet AvailableAlgoParams.cs balanceimpactrisk_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java balanceimpactrisk
			...
			\snippet AvailableAlgoParams.java balanceimpactrisk_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb balanceimpactrisk
			...
			\snippet AvailableAlgoParams.vb balanceimpactrisk_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp balanceimpactrisk
			...
			\snippet AvailableAlgoParams.cpp balanceimpactrisk_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py balanceimpactrisk
			...
			\snippet AvailableAlgoParams.py balanceimpactrisk_params
		</li>
	</ul>
	
	\section minimpact Minimise Impact
	
	The <a href="https://www.interactivebrokers.com/en/index.php?f=1121" target="_blank" class="linkexternal">Minimise Impact</a> algo minimises market impact by slicing the order 
	over time to achieve a market average without going over the given maximum percentage value.
	
	<table>
		<tr><th>Parameter</th><th>Description</th><th>Values</th></tr>
		<tr><td>maxPctVol</td><td>Maximum percentage of average daily volume</td><td>0.1 (10%) - 0.5 (50%)</td></tr>
	</table>
	
	<br>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs algo_base_order
			...
			\snippet Program.cs minimpact
			...
			\snippet AvailableAlgoParams.cs minimpact_params
		</li>
		<li>
			\snippet Testbed.java algo_base_order
			...
			\snippet Testbed.java minimpact
			...
			\snippet AvailableAlgoParams.java minimpact_params
		</li>
		<li>
			\snippet MainModule.vb algo_base_order
			...
			\snippet MainModule.vb minimpact
			...
			\snippet AvailableAlgoParams.vb minimpact_params
		</li>
		<li>
			\snippet TestCppClient.cpp algo_base_order
			...
			\snippet TestCppClient.cpp minimpact
			...
			\snippet AvailableAlgoParams.cpp minimpact_params
		</li>
		<li>
			\snippet Program.py algo_base_order
			...
			\snippet Program.py minimpact
			...
			\snippet AvailableAlgoParams.py minimpact_params
		</li>
	</ul>
	
	<br><br>

*/

/*! \page financial_advisor Financial Advisor

	\section Account Allocation Methods and Groups

	A number of methods and profiles are available with Financial Advisor and IBroker account structures to specify how trades should be distributed across multiple accounts. This functionality allows for trades to be placed across multiple accounts. The API has the same functionality available as TWS. 
	
	Group and Profile order allocation methods for Financial Advisor Accounts can be created directly in TWS: <a target="_blank" class="linkexternal" href="https://www.interactivebrokers.com/en/software/tws/usersguidebook/financialadvisors/allocations_and_transfers.htm">Allocations and Transfers</a>, or utilize the @ref IBApi::EClient::replaceFA() method via the API directly. 
	
	As suggested from the method names below, a Group will distribute the order based on inherent properties such as the account's liquidation value or equity whereas a Profile will offer the possibility to assign the allocated proportion based on explicit ratios or percentages.	
	
	<h1> Allocation by Group </h1>
	
	<b>EqualQuantity</b>
	
	<em>Requires you to specify an order size.</em> This method distributes shares equally between all accounts in the group. 
	
	Example: You transmit an order for 400 shares of stock ABC. If your Account Group includes four accounts, each account receives 100 shares. If your Account Group includes six accounts, each account receives 66 shares, and then 1 share is allocated to each account until all are distributed.
	
	<b>NetLiq</b>
	
	<em>Requires you to specify an order size.</em> This method distributes shares based on the net liquidation value of each account. The system calculates ratios based on the Net Liquidation value in each account and allocates shares based on these ratios.
	
	Example: You transmit an order for 700 shares of stock XYZ. The account group includes three accounts, A, B and C with Net Liquidation values of $25,000, $50,000 and $100,000 respectively. The system calculates a ratio of 1:2:4 and allocates 100 shares to Client A, 200 shares to Client B, and 400 shares to Client C.
	
	<b>AvailableEquity</b>
	
	<em>Requires you to specify an order size.</em> This method distributes shares based on the amount of available equity in each account. The system calculates ratios based on the Available Equity in each account and allocates shares based on these ratios.
	
	Example: You transmit an order for 700 shares of stock XYZ. The account group includes three accounts, A, B and C with available equity in the amounts of $25,000, $50,000 and $100,000 respectively. The system calculates a ratio of 1:2:4 and allocates 100 shares to Client A, 200 shares to Client B, and 400 shares to Client C.
	
	<b>PctChange</b>
	
	<em>Do not specify an order size.</em> Since the quantity is calculated by the system, the order size is displayed in the Quantity field after the order is acknowledged. This method increases or decreases an already existing position. Positive percents will increase a position, negative percents will decrease a position. For exmaple, to fully close out a position, you just need to specify percentage to be -100.
	
	<table>
		<tr><th><b>BUY ORDER</b></th><td><em>Positive Percent</em></td><td><em>Negative Percent</em></td></tr>
		<tr><td>Long Position</td><td>Increases position</td><td>No effect</td></tr>
		<tr><td>Short Position</td><td>No effect</td><td>Decreases position</td></tr>
		<tr><td></td><td></td><td></td></tr>
		<tr><th><b>SELL ORDER</b></th><td><em>Positive Percent</em></td><td><em>Negative Percent</em></td></tr>
		<tr><td>Long Position</td><td>No effect</td><td>Decreases position</td></tr>
		<tr><td>Short Position</td><td>Increases position</td><td>No effect</td></tr>
	</table>
	
	<h1> Allocation by Profile </h1>
	
	<b>Percentages</b>
	
	This method will split the total number of shares in the order between listed accounts based on the percentages you indicate. For example, an order for 1000 shares using a profile with four accounts at 25% each would allocate 250 shares to each listed account in the profile.
	
	<b>Financial Ratios</b>
	
	This method calculates the allocation of shares based on the ratios you enter. For example, an order for 1000 shares using a profile with four accounts set to a ratio of 4, 2, 1, 1 would allocate 500, 250, 125 and 125 shares to the listed accounts, respectively.
	
	<b>Shares</b>
	
	This method allocates the absolute number of shares you enter to each account listed. If you use this method, the order size is calculated by adding together the number of shares allocated to each account in the profile.
	
	<table>
		<caption id="profile_methods_matching">Profile Methods Matching</caption>
		<tr><th>Profile Methods</th><th>Type Number</th></tr>
		<tr><td>Percentages</td><td>Type - 1</td></tr>
		<tr><td>Financial Ratios</td><td>Type - 2</td></tr>
		<tr><td>Shares</td><td>Type - 3</td></tr>
	</table>
	
	<br>
	
	\section allocation_api Groups and Profiles from the API
	
	The @ref IBApi::EClient::requestFA function allows Financial Advisor to manually request current allocation configuration data from TWS. 
	
	<b>Request Account Aliases</b>
	
	<ul id="tab">
		<li class="active">
		   \snippet Program.cs requestfaaliases
		</li>
		<li> 
			\snippet Testbed.java requestfaaliases
		</li>
		<li> 
			\snippet MainModule.vb requestfaaliases
		</li>
		<li> 
			\snippet TestCppClient.cpp requestfaaliases
		</li>
		<li> 
			\snippet Program.py requestfaaliases
		</li>
	</ul>
	
	<b>Request FA Groups</b>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs requestfagroups
		</li>
		<li> 
			\snippet Testbed.java requestfagroups
		</li>
		<li> 
			\snippet MainModule.vb requestfagroups
		</li>
		<li> 
			\snippet TestCppClient.cpp requestfagroups
		</li>
		<li> 
			\snippet Program.py requestfagroups
		</li>
	</ul>
	
	<b>Request FA Profiles</b>
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs requestfaprofiles
		</li>
		<li> 
			\snippet Testbed.java requestfaprofiles
		</li>
		<li> 
			\snippet MainModule.vb requestfaprofiles
		</li>
		<li> 
			\snippet TestCppClient.cpp requestfaprofiles
		</li>
		<li> 
			\snippet Program.py requestfaprofiles
		</li>
	</ul>
	
	The resulting FA allocation configuration will be delivered via the @ref IBApi::EWrapper::receiveFA. The event includes an XML string containing the requested information.
	
	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs ewrapperimpl
		   ...
		   \snippet EWrapperImpl.cs receivefa
		</li>
		<li> 
			\snippet EWrapperImpl.java ewrapperimpl
			...
			\snippet EWrapperImpl.java receivefa
		</li>
		<li> 
			\snippet EWrapperImpl.vb ewrapperimpl
			...
			\snippet EWrapperImpl.vb receivefa
		</li>
		<li> 
			\snippet TestCppClient.h ewrapperimpl
			...
			\snippet TestCppClient.cpp receivefa
		</li>
		<li> 
			\snippet Program.py ewrapperimpl
			...
			\snippet Program.py receivefa
		</li>
	</ul>
	
	The @ref IBApi::EClient::replaceFA function can be called to replace the previous FA configuration in TWS by passing in a FULL XML string that contains all allocation information.
	
	<b>Replace Account Groups Configuration</b>
	
	<ul id="tab">
		<li class="active">
			\snippet FaAllocationSamples.cs faonegroup
		   ...
		   \snippet Program.cs replacefaonegroup
		</li>
		<li> 
			\snippet FAMethodSamples.java faonegroup
			...
			\snippet Testbed.java replacefaonegroup
		</li>
		<li> 

			\snippet FaAllocationSamples.vb faonegroup
			...
			\snippet MainModule.vb replacefaonegroup
		</li>
		<li> 
			\snippet FAMethodSamples.h faonegroup
			...
			\snippet TestCppClient.cpp replacefaonegroup
		</li>
		<li> 
			\snippet FaAllocationSamples.py faonegroup
			...
			\snippet Program.py replacefaonegroup
		</li>
	</ul>
	
	<em><b>Note:</b> The above command will replace any previous FA group configuration in TWS with one 'Group_Equal_Quantity' group allocation.</em>
	
	<ul id="tab">
		<li class="active">
			\snippet FaAllocationSamples.cs fatwogroups
		   ...
		   \snippet Program.cs replacefatwogroups
		</li>
		<li> 
			\snippet FAMethodSamples.java fatwogroups
			...
			\snippet Testbed.java replacefatwogroups
		</li>
		<li> 
			\snippet FaAllocationSamples.vb fatwogroups
			...
			\snippet MainModule.vb replacefatwogroups
		</li>
		<li> 
			\snippet FAMethodSamples.h fatwogroups
			...
			\snippet TestCppClient.cpp replacefatwogroups
		</li>
		<li> 
			\snippet FaAllocationSamples.py fatwogroups
			...
			\snippet Program.py replacefatwogroups
		</li>
	</ul>
	
	<em><b>Note:</b> The above command will add another 'Group_Pct_Change' group allocation to the previous FA configuration.</em>
	
	<b>Replace Account Profiles Configuration</b>
	
	You can find the corresponding type number for profile allocation in the "Profile Methods Matching" table above.
	
	<ul id="tab">
		<li class="active">
			\snippet FaAllocationSamples.cs faoneprofile
		   ...
		   \snippet Program.cs replacefaoneprofile
		</li>
		<li> 
			\snippet FAMethodSamples.java faoneprofile
			...
			\snippet Testbed.java replacefaoneprofile
		</li>
		<li> 
			\snippet FaAllocationSamples.vb faoneprofile
			...
			\snippet MainModule.vb replacefaoneprofile
		</li>
		<li> 
			\snippet FAMethodSamples.h faoneprofile
			...
			\snippet TestCppClient.cpp replacefaoneprofile
		</li>
		<li> 
			\snippet FaAllocationSamples.py faoneprofile
			...
			\snippet Program.py replacefaoneprofile
		</li>
	</ul>
	
	<em><b>Note:</b> The above command will replace any previous FA profile configuration in TWS with one 'Percent_60_40' profile allocation</em>
	
	<ul id="tab">
		<li class="active">
			\snippet FaAllocationSamples.cs fatwoprofiles
		   ...
		   \snippet Program.cs replacefatwoprofiles
		</li>
		<li> 
			\snippet FAMethodSamples.java fatwoprofiles
			...
			\snippet Testbed.java replacefatwoprofiles
		</li>
		<li> 
			\snippet FaAllocationSamples.vb fatwoprofiles
			...
			\snippet MainModule.vb replacefatwoprofiles
		</li>
		<li> 
			\snippet FAMethodSamples.h fatwoprofiles
			...
			\snippet TestCppClient.cpp replacefatwoprofiles
		</li>
		<li> 
			\snippet FaAllocationSamples.py fatwoprofiles
			...
			\snippet Program.py replacefatwoprofiles
		</li>
	</ul>
	
	<em><b>Note:</b> The above command will add another 'Group_Pct_Change' group allocation to the previous FA configuration</em>
	
	<b>Confirming replaceFA Configuration Updates</b>
	
	In order to confirm that your FA changes were saved, you may wait for the IBApi::EWrapper::replaceFAEnd callback shown below, which provides the corresponding reqId.
	
	<ul id="tab">
		<li class="active"> 
			\snippet EWrapperImpl.cs ewrapperimpl
		   ...
		   \snippet EWrapperImpl.cs replacefaend
		</li>
		<li>
			\snippet EWrapperImpl.java ewrapperimpl
		   ...
		   \snippet EWrapperImpl.java replacefaend
		</li>
		<li>
			\snippet EWrapperImpl.vb ewrapperimpl
		   ...
		   \snippet EWrapperImpl.vb replacefaend
		</li>
		<li>
			\snippet TestCppClient.h ewrapperimpl
		   ...
		   \snippet TestCppClient.cpp replacefaend
		</li>
		<li>
			\snippet Program.py ewrapperimpl
		   ...
		   \snippet Program.py replacefaend
		</li>
	</ul>
	
	In addition, after saving changes, it is advised to verify the new FA setup via IBApi::EClient::requestFA. If it is called before changes are fully saved, you may receive an error. See @ref message_codes.
	
	
	\subpage model_portfolios
	
	\subpage financial_advisor_methods_and_orders
	
	<br><br>

*/
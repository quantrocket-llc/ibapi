/*! \page basic_contracts Basic Contracts

	\section cash FX Pairs
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs cashcontract
		</li>
		<li>
			\snippet ContractSamples.java cashcontract
		</li>
		<li>
			\snippet ContractSamples.vb cashcontract
		</li>
		<li>
			\snippet ContractSamples.cpp cashcontract
		</li>
		<li>
			\snippet ContractSamples.py cashcontract
		</li>
	</ul>

	\section cryptocurrency Cryptocurrency
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs crypto_contract
		</li>
		<li>
			\snippet ContractSamples.java crypto_contract
		</li>
		<li>
			\snippet ContractSamples.vb crypto_contract
		</li>
		<li>
			\snippet ContractSamples.cpp crypto_contract
		</li>
		<li>
			\snippet ContractSamples.py crypto_contract
		</li>
	</ul>

	\section stk Stocks
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs stkcontract
		</li>
		<li>
			\snippet ContractSamples.java stkcontract
		</li>
		<li>
			\snippet ContractSamples.vb stkcontract
		</li>
		<li>
		\snippet ContractSamples.cpp stkcontract
		</li>
		<li>
			\snippet ContractSamples.py stkcontract
		</li>
	</ul>

	For certain smart-routed stock contracts that have the same <b>symbol</b>, <b>currency</b> and <b>exchange</b>, you would also need to specify the <b>primary exchange</b> attribute to uniquely define the contract. This should be defined as the native exchange of a contract, and is good practice to include for all stocks:

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs stkcontractwithprimary
		</li>
		<li>
			\snippet ContractSamples.java stkcontractwithprimary
		</li>
		<li>
			\snippet ContractSamples.vb stkcontractwithprimary
		</li>
		<li>
		\snippet ContractSamples.cpp stkcontractwithprimary
		</li>
		<li>
			\snippet ContractSamples.py stkcontractwithprimary
		</li>
	</ul>

	For the purpose of requesting market data, the routing exchange and primary exchange can be specified in a single 'exchange' field if they are separated by a valid component exchange separator, for instance exchange =  "SMART:ARCA". The default separators available are colon ":" and slash "/". Other component exchange separators can be defined using the field defined in TWS Global Configuration under API -> Settings. The component exchange separator syntax in TWS versions prior to 971 can only be used to request market data and not to place orders.

	\section ind Indexes
	ISINs for indices which are available in IB's database are available in the API as of TWS 965+.

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs indcontract
		</li>
		<li>
			\snippet ContractSamples.java indcontract
		</li>
		<li>
			\snippet ContractSamples.vb indcontract
		</li>
		<li>
		\snippet ContractSamples.cpp indcontract
		</li>
		<li>
			\snippet ContractSamples.py indcontract
		</li>
	</ul>

	\section cfd CFDs

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs cfdcontract
		</li>
		<li>
			\snippet ContractSamples.java cfdcontract
		</li>
		<li>
			\snippet ContractSamples.vb cfdcontract
		</li>
		<li>
		\snippet ContractSamples.cpp cfdcontract
		</li>
		<li>
			\snippet ContractSamples.py cfdcontract
		</li>
	</ul>

	\section fut Futures

	A regular futures contract is commonly defined using an expiry and the symbol field defined as the symbol of the underlying. Historical data for futures is available up to 2 years after they expire by setting the includeExpired flag within the Contract class to True.

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs futcontract
		</li>
		<li>
			\snippet ContractSamples.java futcontract
		</li>
		<li>
			\snippet ContractSamples.vb futcontract
		</li>
		<li>
		\snippet ContractSamples.cpp futcontract
		</li>
		<li>
			\snippet ContractSamples.py futcontract
		</li>
	</ul>

	By contract the 'local symbol' field is IB's symbol for the future itself (the Symbol within the TWS' Contract Description dialog).
	Since a local symbol uniquely defines a future, an expiry is not necessary.

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs futcontract_local_symbol
		</li>
		<li>
			\snippet ContractSamples.java futcontract_local_symbol
		</li>
		<li>
			\snippet ContractSamples.vb futcontract_local_symbol
		</li>
		<li>
		\snippet ContractSamples.cpp futcontract_local_symbol
		</li>
		<li>
			\snippet ContractSamples.py futcontract_local_symbol
		</li>
	</ul>

	Occasionally, you can expect to have more than a single future contract for the same underlying with the same expiry. To rule out the
	ambiguity, the contract's <b>multiplier</b> can be given as shown below:

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs futcontract_multiplier
		</li>
		<li>
			\snippet ContractSamples.java futcontract_multiplier
		</li>
		<li>
			\snippet ContractSamples.vb futcontract_multiplier
		</li>
		<li>
		\snippet ContractSamples.cpp futcontract_multiplier
		</li>
		<li>
			\snippet ContractSamples.py futcontract_multiplier
		</li>
	</ul>

	Continuous futures are available from the API with <b>TWS v971</b> and higher. Continuous futures cannot be used with real time data or to place orders, but only for historical data.

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs continuousfuturescontract
		</li>
		<li>
			\snippet ContractSamples.java continuousfuturescontract
		</li>
		<li>
			\snippet ContractSamples.vb continuousfuturescontract
		</li>
		<li>
		\snippet ContractSamples.cpp continuousfuturescontract
		</li>
		<li>
			\snippet ContractSamples.py continuousfuturescontract
		</li>
	</ul>

	The security type "FUT+CONTFUT" can be used to request contract details about the futures and continuous futures on an underlying.
	This security type cannot be used with other functionality.

	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs contandexpiringfut
		</li>
		<li>
			\snippet ContractSamples.java contandexpiringfut
		</li>
		<li>
			\snippet ContractSamples.vb contandexpiringfut
		</li>
		<li>
		\snippet ContractSamples.cpp contandexpiringfut
		</li>
		<li>
			\snippet ContractSamples.py contandexpiringfut
		</li>
	</ul>


	\section opt Options

	Options, like futures, also require an expiration date plus a <b>strike</b> and a <b>multiplier</b>:

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs optcontract
		</li>
		<li>
			\snippet ContractSamples.java optcontract
		</li>
		<li>
			\snippet ContractSamples.vb optcontract
		</li>
		<li>
			\snippet ContractSamples.cpp optcontract
		</li>
		<li>
			\snippet ContractSamples.py optcontract
		</li>
	</ul>

	It is not unusual to find many option contracts with an almost identical description (i.e. underlying symbol, strike, last trading date, multiplier, etc.).
	Adding more details such as the <b>trading class</b> will help:

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.java optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.vb optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.cpp optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.py optcontract_tradingclass
		</li>
	</ul>

	The OCC options symbol can be used to define an option contract in the API through the option's 'local symbol' field.

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.java optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.vb optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.cpp optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.py optcontract_localsymbol
		</li>
	</ul>

	\section fop Futures Options

	<b>Important: In TWS versions prior to 972</b>, if defining a futures option that has a price magnifier using the strike price, the strike will be the strike price displayed in TWS divided by the price magnifier.
	(e.g. displayed in dollars not cents for ZW@ECBOT)<br>
	In <b>TWS versions 972 and greater</b>, the strike prices will be shown in TWS and the API the same way (without a price magnifier applied)
	<br>
	For some futures options (e.g GE) it will be necessary to define a trading class, or use the local symbol, or conId.

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs fopcontract
		</li>
		<li>
			\snippet ContractSamples.java fopcontract
		</li>
		<li>
			\snippet ContractSamples.vb fopcontract
		</li>
		<li>
			\snippet ContractSamples.cpp fopcontract
		</li>
		<li>
			\snippet ContractSamples.py fopcontract
		</li>
	</ul>

	\section Bonds

	Bonds can be specified by defining the symbol as the CUSIP or ISIN.

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.java bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.vb bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.cpp bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.py bondwithcusip
		</li>
	</ul>

	Bonds can also be defined with the conId and exchange as with any security type.

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs bond
		</li>
		<li>
			\snippet ContractSamples.java bond
		</li>
		<li>
			\snippet ContractSamples.vb bond
		</li>
		<li>
			\snippet ContractSamples.cpp bond
		</li>
		<li>
			\snippet ContractSamples.py bond
		</li>
	</ul>

	\section funds Mutual Funds
	Order placement for Mutual Funds is currently supported from the API both in paper account and live account. 
	Note: It is recommended to understand mutual fund orders on TWS UI before implementing via API due to restrictions enforced on trading mutual funds. For example to buy ARBIX one requires to use cash quantity i.e. cashQty while selling ARBIX can be implemented using total quantity i.e. totalQuantity.
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs fundcontract
		</li>
		<li>
			\snippet ContractSamples.java fundcontract
		</li>
		<li>
			\snippet ContractSamples.vb fundcontract
		</li>
		<li>
			\snippet ContractSamples.cpp fundcontract
		</li>
		<li>
			\snippet ContractSamples.py fundcontract
		</li>
	</ul>

	\section Commodities

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs commoditycontract
		</li>
		<li>
			\snippet ContractSamples.java commoditycontract
		</li>
		<li>
			\snippet ContractSamples.vb commoditycontract
		</li>
		<li>
			\snippet ContractSamples.cpp commoditycontract
		</li>
		<li>
			\snippet ContractSamples.py commoditycontract
		</li>
	</ul>

	\section warrant Standard Warrants

	Warrants, like options, require an <b>expiration date</b>, a <b>right</b>, a <b>strike</b> and a <b>multiplier</b>. For some warrants it will be necessary to define a localSymbol or conId to uniquely identify the contract.

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs warcontract
		</li>
		<li>
			\snippet ContractSamples.java warcontract
		</li>
		<li>
			\snippet ContractSamples.vb warcontract
		</li>
		<li>
			\snippet ContractSamples.cpp warcontract
		</li>
		<li>
			\snippet ContractSamples.py warcontract
		</li>
	</ul>

	\section iopts Dutch Warrants and Structured Products

	To unambiguously define a Dutch Warrant or Structured Product (IOPTs) the conId or localSymbol field must be used.
	- It is important to note that if reqContractDetails is used with an incompletely-defined IOPT contract definition, that thousands of results can be returned and the API connection broken.
	- IOPT contract definitions will often change and it will be necessary to restart TWS or IB Gateway to download the new contract definition.

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs ioptcontract
		</li>
		<li>
			\snippet ContractSamples.java ioptcontract
		</li>
		<li>
			\snippet ContractSamples.vb ioptcontract
		</li>
		<li>
			\snippet ContractSamples.cpp ioptcontract
		</li>
		<li>
			\snippet ContractSamples.py ioptcontract
		</li>
	</ul>

	<br><br>

*/
